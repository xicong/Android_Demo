apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
//apply plugin: 'androidx.navigation.safeargs'//适用于java 和 kotlin
apply plugin: "androidx.navigation.safeargs.kotlin"

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.cong.demo"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            res.srcDirs =
                    [
                            'src/main/res',
                            'src/main/res_zidingyiview',
                            'src/main/res_shijianfenfa',
                            'src/main/res_lliaojieactivitydeqidongguocheng',
                            'src/main/res_activity',
                            'src/main/res_fragment',
                            'src/main/res_rx',
                            'src/main/res_xiancheng',
                            'src/main/res_mergeadapter',
                            'src/main/res_jetpack',
                            'src/main/res_bluetooth',
                            'src/main/res_mvp',
                            'src/main/res_mvvm',
                            'src/main/res_mvc',
                    ]
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8 
        targetCompatibility = JavaVersion.VERSION_1_8 
    }
    viewBinding {
        enabled = true
    }
    dataBinding {
        enabled = true
    }

    //声明编译的jvm版本
    kotlinOptions {
        jvmTarget = "1.8" 
    }
// To inline the bytecode built with JVM target 1.8 into
// bytecode that is being built with JVM target 1.6. (e.g. navArgs)
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //kotlin的标准库
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //Androidx
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    testImplementation 'junit:junit:4.13'

    //utils
    implementation 'com.blankj:utilcodex:1.28.1'

    //recyclerview
//    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.0-alpha02'

    //adapter的一个封装库
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.2'

    //协程的基础库
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.0'

    //Jetpack 是一套库,工具,和指南
    //基础  
    //      Android KTX    编写更简洁 惯用的kotlin代码
    //      AppComat    在较低版本的Android系统上恰当的降级
    //      Auto    有助于开发Android Auto应用的组件
    //      检测   从AndroidStudio中快速检测基于Kotlin或Java的代码
    //      多dex 安全  为具有多个Dex文件的应用提供支持
    //架构  
    //      数据绑定   以声明方式将可观察数据绑定到界面元素
    //      Lifecycles   管理Activity和Fragment的生命周期
    //      LiveData   在底层数据库更改时通知视图
    //      Navigation    处理应用内导航所需要的一切
    //      paging   逐步从你的数据源按需加载信息
    //      room   流畅的访问sqlist数据库
    //      viewmodel   以注重生命周期的方式管理界面的数据
    //      workManager  管理你的android后台作业
    //行为 
    //      camerax  轻松的向应用添加相机的功能
    //      下载管理器  安排和管理大量的下载任务
    //      媒体和播放   用于媒体播放和路由（包括google cast）的向后兼容api
    //      通知  提供向后兼容的通知api 支持wear auto
    //      权限   用于检查和请求应用权限的兼容api
    //      偏好设置  创建交互式设置屏幕
    //      共享   提供适合应用操作栏的共享操作
    //      切片 创建可在应用外部显示应用数据的灵活切片
    //界面 
    //      动画和过渡  移动微件和屏幕之间的过渡
    //      表情符号   在旧版平台上启用最新的表情符号字体
    //      Fragment   组件化界面的基本单位
    //      布局  使用不用的算法布局布置微件
    //      调色板 调色板中提取出有用的信息
    //LifeCycle是GoogleApp架构中推荐的一个组件   比较方便的管理Activity Fragment的声明周期
    //LifeCycle实现了执行的逻辑和活动的分离，代码解耦并且增加了代码的可读性
    //LifeCycle在活动结束时自定移除监听，避免了声明周期的问题
    implementation "androidx.lifecycle:lifecycle-runtime:2.2.0"
    kapt "androidx.lifecycle:lifecycle-compiler:2.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.2.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.2.1'
    implementation 'androidx.navigation:navigation-fragment:2.2.1'
    implementation 'androidx.navigation:navigation-ui:2.2.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.room:room-runtime:2.2.5"
    // For Kotlin use kapt instead of annotationProcessor
    kapt "androidx.room:room-compiler:2.2.5" 
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:2.2.5"

    //Glide
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'
    
    //BasePopup
    implementation 'com.github.razerdp:BasePopup:2.2.2.2'
    
    //dialog
    implementation 'com.afollestad.material-dialogs:core:3.3.0'
    implementation 'com.afollestad.material-dialogs:input:3.3.0'
    implementation 'com.afollestad.material-dialogs:files:3.3.0'
    implementation 'com.afollestad.material-dialogs:color:3.3.0'
    implementation 'com.afollestad.material-dialogs:datetime:3.3.0'
    implementation 'com.afollestad.material-dialogs:bottomsheets:3.3.0'
    implementation 'com.afollestad.material-dialogs:lifecycle:3.3.0'
    
    //蓝牙相关的sdk
    implementation project(path: ':monitor')

}
